# This workflow creates a hotfix branch and an issue to track the hotfix.
name: ‚ñ∂Ô∏è Create Hotfix

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        type: string

jobs:
  create_hotfix:
    runs-on: ubuntu-18.04
    steps:
      - run: echo "Creating hotfix for ${{ github.event.inputs.tag }}"
      - uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ github.event.inputs.tag }}
      - name: Set variables
        id: vars
        run: |
          NEXT_TAG=${{ github.event.inputs.tag }}-hotfix
          echo "::set-output name=next_tag::${NEXT_TAG}"
      - name: Create release branch
        uses: actions/github-script@v5
        env:
          CURRENT_TAG: ${{ github.event.inputs.tag }}
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            const {CURRENT_TAG} = process.env
            const ref = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `tags/${CURRENT_TAG}`
            })
            const {sha} = ref.data.object
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/hotfix/${CURRENT_TAG}`,
              sha
            })
      - name: Create issue
        id: create-issue
        if: ${{ success() }}
        uses: actions/github-script@v5
        env:
          NEXT_TAG: ${{ steps.vars.outputs.next_tag }}
          CURRENT_TAG: ${{ github.event.inputs.tag }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const {NEXT_TAG, CURRENT_TAG} = process.env

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Hotfix for ${NEXT_TAG}`,
              labels: ['RC'],
              body: `
            **Script generated description. DO NOT MODIFY**

            ## Metadata

            - Release tag: ${NEXT_TAG}
            - Branch: hotfix/${CURRENT_TAG}

            ## Actions

            - To add fixes:
              1. \`git checkout hotfix/${CURRENT_TAG}\`
              2. Check in fixes to the release branch.
              3. (If applied) Cherry-pick the fix to \`master\`.
            - To approve the push: Add \`QA Approved\` label and close the issue.
            - To cancel the push: Close the issue directly.
            `,
            })

            return issue.data.html_url
      # - name: Post to a Slack channel
      #   id: slack
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.ZEFFO_SLACK_NOTIFIER_WEBHOOK }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      #   uses: slackapi/slack-github-action@v1.16.0
      #   with:
      #     payload: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "[${{ steps.vars.outputs.next_tag }}] ü©π Hotfix branch created üßê"
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "Please commit your fixes to hotfix/${{ github.event.inputs.tag }}."
      #             },
      #             "accessory": {
      #               "type": "button",
      #               "text": {
      #                 "type": "plain_text",
      #                 "text": "Open issue"
      #               },
      #               "url": "${{ steps.create-issue.outputs.result }}",
      #               "action_id": "button-action"
      #             }
      #           }
      #         ]
      #       }
