# This workflow creates a release branch and an issue to track the release.
name: ▶️ Create RC

# TODO: add scheduled after testing.
on: workflow_dispatch

jobs:
  create_rc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set variables
        env:
          GITHUB_SHA: ${{ github.sha }}
        id: vars
        run: |
          # Need to fetch tags to get the latest tag.
          git fetch --prune --unshallow --tags

          # Create a new tag based on the latest tag.
          RELEASE_CUT_DATE=`TZ=America/Los_Angeles date +'%Y%m%d'`
          PREV_VERSION=`git tag | grep v${RELEASE_CUT_DATE}- | sort -r | head -n 1 | sed s/v${RELEASE_CUT_DATE}-//`
          LATEST_TAG=`git tag | sort -r | head -n 1`
          NEXT_VERSION=$((${PREV_VERSION:-0}+1))
          NEXT_TAG=v"$RELEASE_CUT_DATE"-"$NEXT_VERSION"

          # Extract the commits since the last release (the last tag).
          COMMON_ANCESTOR=`git merge-base ${GITHUB_SHA} ${LATEST_TAG}`
          DIFF_COMMITS=`git rev-list --abbrev-commit --format=oneline ${COMMON_ANCESTOR}..${GITHUB_SHA}`

          # Save DIFF_COMMITS to GITHUB_ENV to keep multiline strings.
          echo "DIFF_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$DIFF_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "::set-output name=next_tag::${NEXT_TAG}"
          echo "::set-output name=latest_tag::${LATEST_TAG}"
      - name: Create release branch
        uses: actions/github-script@v5
        env:
          NEXT_TAG: ${{steps.vars.outputs.next_tag}}
        with:
          # Use the personal token so it can trigger the CI workflow.
          github-token: ${{secrets.WORKFLOW_TOKEN}}
          script: |
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/release/${process.env.NEXT_TAG}`,
              sha: context.sha
            })
      - name: Create release issue
        id: create-release-issue
        if: ${{ success() }}
        uses: actions/github-script@v5
        env:
          NEXT_TAG: ${{steps.vars.outputs.next_tag}}
          LATEST_TAG: ${{steps.vars.outputs.latest_tag}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const {NEXT_TAG, LATEST_TAG} = process.env
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release candidate ${NEXT_TAG}`,
              labels: ['RC'],
              body: `
            **Script generated description. DO NOT MODIFY**

            ## Metadata

            - Release tag: ${NEXT_TAG}
            - Branch: release/${NEXT_TAG}

            ## Actions

            - To add release fixes:
              1. \`git checkout release/${NEXT_TAG}\`
              2. Check in fixes to the release branch.
              3. (If applied) Cherry-pick the fix to \`master\`.
            - To approve the push: Add \`QA Approved\` label and close the issue.
            - To cancel the push: Close the issue directly.

            ## Included commits

            ${process.env.DIFF_COMMITS}
            `,
            })
            return issue.data.html_url
      - name: Post to a Slack channel
        id: slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ZEFFO_SLACK_NOTIFIER_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        uses: slackapi/slack-github-action@v1.16.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "[${{ steps.vars.outputs.next_tag }}] ✂️ Release cut"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The release candidate is ready for testing."
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Open issue"
                    },
                    "url": "${{ steps.create-release-issue.outputs.result }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
