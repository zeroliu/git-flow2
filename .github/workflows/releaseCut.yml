name: Create a release candidate

on: workflow_dispatch

jobs:
  create_release:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set variables
        env:
          GITHUB_SHA: ${{ github.sha }}
        id: vars
        run: |
          git fetch --prune --unshallow --tags
          RELEASE_CUT_DATE=`TZ=America/Los_Angeles date +'%Y%m%d'`
          PREV_VERSION=`git tag | grep v${RELEASE_CUT_DATE}- | sort -r | head -n 1 | sed s/v${RELEASE_CUT_DATE}-//`
          LATEST_TAG=`git tag | sort -r | head -n 1`
          NEXT_VERSION=$((${PREV_VERSION:-0}+1))
          NEXT_TAG=v"$RELEASE_CUT_DATE"-"$NEXT_VERSION"
          COMMON_ANCESTOR=`git merge-base ${GITHUB_SHA} ${LATEST_TAG}`
          DIFF_COMMITS=`git rev-list --abbrev-commit --format=oneline ${COMMON_ANCESTOR}..${GITHUB_SHA}`
          echo "DIFF_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$DIFF_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "RELEASE_CUT_DATE=${RELEASE_CUT_DATE}"
          echo "PREV_VERSION=${PREV_VERSION}"
          echo "::set-output name=next_tag::${NEXT_TAG}"
          echo "::set-output name=latest_tag::${LATEST_TAG}"
      - name: Create release branch
        uses: actions/github-script@v5
        env:
          NEXT_TAG: ${{steps.vars.outputs.next_tag}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/release/${process.env.NEXT_TAG}`,
              sha: context.sha
            })
      - name: Create release issue
        if: ${{ success() }}
        uses: actions/github-script@v5
        env:
          NEXT_TAG: ${{steps.vars.outputs.next_tag}}
          LATEST_TAG: ${{steps.vars.outputs.latest_tag}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const {NEXT_TAG, LATEST_TAG} = process.env
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release candidate ${NEXT_TAG}`,
              labels: ['RC'],
              body: `
            ### Release tag: ${NEXT_TAG}
            ### Branch: release/${NEXT_TAG}

            - To add release fixes:
              1. \`git checkout release/${NEXT_TAG}\`
              2. Check in fixes to the release branch.
              3. (If applied) Cherry-pick the fix to \`master\`.
            - To approve the push: Add \`golden\` label and close the issue.
            - To cancel the push: Close the issue directly.

            ### Included commits

            ${process.env.DIFF_COMMITS}
            `,
            })
      - name: Deploy to staging
        run: echo "Deploy to staging"
      - name: Notify slack channel
        run: echo "Notify slack channel"
